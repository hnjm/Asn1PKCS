using System;
using System.Linq;
using System.Security.Cryptography;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using Asn1PKCS.Encoder;

namespace Asn1PKCSTest.Encoder
{

    [TestClass]
    public class PKCS8DEREncoderTest
    {
        [TestMethod]
        public void EncodePublicKeyTest_384bit_e17()
        {
            byte[] modulus = new byte[] { 0xBE, 0x7D, 0xF2, 0xE9, 0x01, 0xCA, 0x41, 0x62, 0x6F, 0x1B, 0x88, 0x8A, 0xB9, 0x65, 0x95, 0x16, 0x25, 0x69, 0xDF, 0xC9, 0xB2, 0x48, 0x3D, 0x96, 0x65, 0x75, 0x13, 0x4D, 0x70, 0x52, 0x19, 0xF0, 0x52, 0xEC, 0xF4, 0x6E, 0xDA, 0x02, 0x76, 0x2C, 0x08, 0xB5, 0xB3, 0x8F, 0x5D, 0x76, 0x99, 0x1D };
            byte[] exponent = new byte[] { 0x11 };

            string expected = "MEowDQYJKoZIhvcNAQEBBQADOQAwNgIxAL598ukBykFibxuIirlllRYlad/Jskg9lmV1E01wUhnwUuz0btoCdiwItbOPXXaZHQIBEQ==";

            PublicKeyTest(modulus, exponent, expected);
        }

        [TestMethod]
        public void EncodePublicKeyTest_384bit_e65537()
        {
            byte[] modulus = new byte[] { 0xB9, 0x46, 0x37, 0x1D, 0x24, 0x4D, 0xD3, 0xC0, 0x8D, 0x29, 0xE4, 0x84, 0x7D, 0x17, 0xC9, 0x17, 0xE4, 0x2A, 0xBB, 0x0F, 0xEE, 0x20, 0x98, 0x0A, 0xE0, 0x9A, 0xF7, 0xBB, 0xDC, 0xDC, 0x96, 0x47, 0x36, 0xDC, 0x99, 0x8C, 0x15, 0x8F, 0x32, 0xFC, 0x76, 0xA7, 0xE8, 0x96, 0xEF, 0xC0, 0x5E, 0xF5 };
            byte[] exponent = new byte[] { 0x01, 0x00, 0x01 };

            string expected = "MEwwDQYJKoZIhvcNAQEBBQADOwAwOAIxALlGNx0kTdPAjSnkhH0XyRfkKrsP7iCYCuCa97vc3JZHNtyZjBWPMvx2p+iW78Be9QIDAQAB";

            PublicKeyTest(modulus, exponent, expected);
        }

        [TestMethod]
        public void EncodePublicKeyTest_512bit()
        {
            byte[] modulus = new byte[] { 0xB7, 0x65, 0xBB, 0xF4, 0xA2, 0x4A, 0xBD, 0x06, 0x7C, 0xB9, 0x11, 0x18, 0xE3, 0x2B, 0x73, 0x42, 0x97, 0x48, 0xF7, 0x73, 0xE2, 0xFB, 0xA6, 0x83, 0x39, 0x84, 0x03, 0x99, 0xEE, 0x0C, 0xB9, 0xAA, 0x2A, 0x7B, 0x63, 0x08, 0x3A, 0xB2, 0x4F, 0xD2, 0xA2, 0x55, 0xE8, 0xDF, 0x71, 0x3E, 0x48, 0x5F, 0x0F, 0x77, 0xA7, 0x78, 0x25, 0x6F, 0xED, 0xD6, 0x2D, 0x9A, 0x5D, 0x4A, 0xA3, 0x56, 0x0B, 0xF5 };
            byte[] exponent = new byte[] { 0x01, 0x00, 0x01 };

            string expected = "MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALdlu/SiSr0GfLkRGOMrc0KXSPdz4vumgzmEA5nuDLmqKntjCDqyT9KiVejfcT5IXw93p3glb+3WLZpdSqNWC/UCAwEAAQ==";

            PublicKeyTest(modulus, exponent, expected);
        }

        [TestMethod]
        public void EncodePublicKeyTest_1024bit()
        {
            byte[] modulus = new byte[] { 0xA8, 0xF1, 0x0C, 0x1B, 0x21, 0x3F, 0x39, 0xD8, 0x47, 0x35, 0x0A, 0x8A, 0xE1, 0x16, 0xAC, 0xE9, 0xE3, 0xF9, 0x74, 0x8B, 0x05, 0x19, 0x21, 0xCF, 0x6A, 0x95, 0xFC, 0xAB, 0xD2, 0x48, 0x38, 0x50, 0xC8, 0xE0, 0xFC, 0x3C, 0xEB, 0x09, 0xC7, 0xA3, 0xA6, 0x18, 0x55, 0xD4, 0x06, 0x8D, 0xA2, 0x00, 0x9D, 0xA2, 0x27, 0x10, 0x37, 0xB0, 0x65, 0xD5, 0x93, 0x6D, 0x6F, 0xC9, 0x2C, 0xF3, 0xDF, 0xAC, 0x49, 0x2A, 0x70, 0x02, 0x69, 0x80, 0xC7, 0x5B, 0xC9, 0x06, 0x20, 0xAE, 0x9F, 0xC0, 0xAC, 0x34, 0x2C, 0x3A, 0xA3, 0x64, 0x81, 0x1C, 0x24, 0x53, 0x3F, 0x4F, 0x60, 0x48, 0x83, 0x08, 0xEF, 0x96, 0x07, 0x32, 0xB8, 0xD4, 0x27, 0x75, 0x41, 0x07, 0xE5, 0x7A, 0x39, 0x66, 0x18, 0xBB, 0x2B, 0xA8, 0xB9, 0xCE, 0x19, 0xE2, 0x37, 0xC9, 0xD5, 0x26, 0x70, 0x2B, 0x39, 0x98, 0xF5, 0xE4, 0xC3, 0xDD };
            byte[] exponent = new byte[] { 0x01, 0x00, 0x01 };

            string expected = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCo8QwbIT852Ec1CorhFqzp4/l0iwUZIc9qlfyr0kg4UMjg/DzrCcejphhV1AaNogCdoicQN7Bl1ZNtb8ks89+sSSpwAmmAx1vJBiCun8CsNCw6o2SBHCRTP09gSIMI75YHMrjUJ3VBB+V6OWYYuyuouc4Z4jfJ1SZwKzmY9eTD3QIDAQAB";

            PublicKeyTest(modulus, exponent, expected);
        }

        [TestMethod]
        public void EncodePublicKeyTest_2048bit()
        {
            byte[] modulus = new byte[] { 0xA6, 0x85, 0xD1, 0x37, 0x25, 0xDA, 0x87, 0x1E, 0x0F, 0xB1, 0x7F, 0x3C, 0xDC, 0x4B, 0x21, 0xE6, 0x24, 0xA7, 0x24, 0xCD, 0x44, 0xEC, 0x2A, 0xE0, 0x0C, 0x09, 0x96, 0xF6, 0xCD, 0x8F, 0x6E, 0xBE, 0x5B, 0x75, 0x0A, 0xC2, 0xE7, 0xBC, 0x4B, 0x17, 0x1A, 0x81, 0x07, 0x7B, 0xCC, 0xE2, 0xF5, 0xB2, 0x64, 0x2C, 0x6F, 0x86, 0x62, 0x1A, 0xFF, 0x17, 0xBE, 0x06, 0x9A, 0xF9, 0xD7, 0x73, 0xD8, 0x2B, 0x04, 0xFA, 0x31, 0xD7, 0xB8, 0xFB, 0x97, 0xDD, 0xF3, 0xD7, 0x30, 0x61, 0x48, 0x15, 0x50, 0x9E, 0xD4, 0xAE, 0x88, 0xDB, 0x0F, 0x2E, 0x89, 0x87, 0x1C, 0x89, 0x2E, 0x7A, 0x28, 0x4B, 0xAC, 0x95, 0x82, 0xA8, 0x6D, 0x9C, 0xA8, 0x34, 0x6B, 0x6B, 0x67, 0xC6, 0x1E, 0x14, 0x8B, 0x3F, 0x21, 0x15, 0x27, 0x34, 0x73, 0x0C, 0xCC, 0xCE, 0x5A, 0x82, 0xFB, 0x86, 0x96, 0xFD, 0xD5, 0x72, 0x5C, 0x51, 0xE3, 0xA7, 0xA0, 0x9D, 0x9B, 0xF2, 0x5B, 0x96, 0x65, 0x82, 0x69, 0x32, 0x6B, 0xAB, 0x43, 0xD4, 0x3D, 0x40, 0xC1, 0xD1, 0x69, 0x37, 0x7E, 0xC1, 0xDF, 0xDD, 0x7B, 0x48, 0x1C, 0xB2, 0x8A, 0x26, 0x20, 0xBC, 0x98, 0x16, 0x1F, 0x41, 0x13, 0x14, 0x6B, 0x3B, 0xEA, 0x46, 0xC8, 0x59, 0x42, 0xBE, 0x85, 0xB1, 0x43, 0x05, 0x4E, 0x7F, 0x93, 0xAE, 0xE3, 0xE8, 0xAE, 0x30, 0xFC, 0xDB, 0x4F, 0x44, 0xEB, 0x32, 0xA5, 0x81, 0x25, 0x12, 0xFC, 0x0C, 0xEF, 0x6B, 0xB9, 0xA2, 0x6A, 0x5A, 0x0D, 0xF4, 0x02, 0x64, 0x63, 0xE8, 0xBC, 0x9E, 0x76, 0xE6, 0xCD, 0x89, 0x82, 0x01, 0x7C, 0x24, 0x2E, 0x33, 0x11, 0x2D, 0x98, 0xFF, 0x03, 0xAF, 0xDC, 0x5A, 0x6A, 0x9B, 0x9E, 0x83, 0xC3, 0x46, 0xE0, 0x45, 0xBA, 0x58, 0xC7, 0x08, 0xEF, 0xBF, 0xB1, 0xF3, 0x91, 0xC9, 0x01, 0x0C, 0xB1, 0xCC, 0xB7, 0x4D };
            byte[] exponent = new byte[] { 0x01, 0x00, 0x01 };

            string expected = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApoXRNyXahx4PsX883Esh5iSnJM1E7CrgDAmW9s2Pbr5bdQrC57xLFxqBB3vM4vWyZCxvhmIa/xe+Bpr513PYKwT6Mde4+5fd89cwYUgVUJ7UrojbDy6JhxyJLnooS6yVgqhtnKg0a2tnxh4Uiz8hFSc0cwzMzlqC+4aW/dVyXFHjp6Cdm/JblmWCaTJrq0PUPUDB0Wk3fsHf3XtIHLKKJiC8mBYfQRMUazvqRshZQr6FsUMFTn+TruPorjD8209E6zKlgSUS/Azva7mialoN9AJkY+i8nnbmzYmCAXwkLjMRLZj/A6/cWmqbnoPDRuBFuljHCO+/sfORyQEMscy3TQIDAQAB";

            PublicKeyTest(modulus, exponent, expected);
        }

        private void PublicKeyTest(byte[] modulus, byte[] exponent, string expectedB64)
        {
            RSAParameters rsaParams = new RSAParameters();
            rsaParams.Modulus = modulus;
            rsaParams.Exponent = exponent;

            byte[] actual = PKCS8DEREncoder.EncodePublicKey(rsaParams);
            byte[] expected = Convert.FromBase64String(expectedB64);
            CollectionAssert.AreEqual(expected, actual);

            string actualB64 = PKCS8DEREncoder.EncodePublicKeyToBase64(rsaParams);
            Assert.AreEqual(expectedB64, actualB64);
        }


        [TestMethod]
        public void EncodePrivateKeyTest_384bit()
        {
            RSAParameters rsaParams = new RSAParameters();
            rsaParams.Modulus = new byte[] { 0xEA, 0x41, 0x8B, 0x17, 0x64, 0xFB, 0x35, 0x5C, 0x89, 0xB7, 0xFD, 0x3B, 0x11, 0xE0, 0x2A, 0x76, 0xDE, 0xE4, 0x1E, 0xA8, 0x1E, 0xA0, 0x0D, 0x77, 0x96, 0x61, 0xB7, 0x35, 0x3F, 0xC3, 0x68, 0xFB, 0x2B, 0x9C, 0x43, 0x3E, 0x4C, 0x87, 0x9B, 0xD6, 0xA3, 0x76, 0x1D, 0xF1, 0xCA, 0x0A, 0x69, 0x1F };
            rsaParams.Exponent = new byte[] { 0x11 };
            rsaParams.D = new byte[] { 0x29, 0x56, 0xDC, 0x4F, 0x6C, 0x2C, 0x54, 0xB5, 0xFA, 0x2F, 0x87, 0x0A, 0x6C, 0x90, 0xF8, 0x6F, 0x54, 0x82, 0x9B, 0xFF, 0x8C, 0xEF, 0x11, 0x6F, 0x1E, 0x6A, 0x95, 0xD0, 0x5A, 0x9B, 0x1D, 0x8D, 0x17, 0x85, 0x86, 0x13, 0x62, 0xB7, 0x0C, 0x7B, 0x18, 0x6A, 0x55, 0x24, 0x53, 0xDF, 0x28, 0x49 };
            rsaParams.P = new byte[] { 0xFC, 0xD1, 0x5C, 0x3C, 0x18, 0x99, 0x51, 0x5A, 0xB0, 0x25, 0xCA, 0x38, 0xE9, 0xBF, 0xF4, 0x1E, 0x1F, 0x63, 0x6A, 0x15, 0x55, 0x8D, 0x21, 0x53 };
            rsaParams.Q = new byte[] { 0xED, 0x34, 0x5F, 0x5C, 0x7B, 0x10, 0x70, 0x2B, 0xA0, 0xD7, 0x2B, 0xEC, 0xDE, 0x0F, 0xB6, 0x54, 0x4F, 0x0D, 0x7C, 0x0E, 0x99, 0x37, 0x63, 0x85 };
            rsaParams.DP = new byte[] { 0x1D, 0xBE, 0x47, 0x16, 0x21, 0x02, 0xFA, 0x83, 0x23, 0xC8, 0x35, 0xE8, 0x93, 0xF8, 0x77, 0x12, 0x9A, 0x47, 0xEE, 0x5C, 0xDC, 0xE3, 0x6D, 0x55 };
            rsaParams.DQ = new byte[] { 0x61, 0xAC, 0x27, 0x44, 0x32, 0xAC, 0x6A, 0x6C, 0x51, 0x49, 0x8A, 0x8E, 0xB5, 0xCA, 0x3C, 0x04, 0x99, 0x05, 0x8D, 0x6F, 0x6C, 0x43, 0xFB, 0xCD };
            rsaParams.InverseQ = new byte[] { 0xBB, 0x62, 0xB3, 0x54, 0xA4, 0x63, 0xED, 0x67, 0xAC, 0x9D, 0x95, 0xDF, 0xD9, 0x98, 0xBC, 0x37, 0x65, 0x20, 0xA2, 0xDD, 0x76, 0x58, 0x10, 0x9F };

            string expected = "MIIBCAIBADANBgkqhkiG9w0BAQEFAASB8zCB8AIBAAIxAOpBixdk+zVcibf9OxHgKnbe5B6oHqANd5ZhtzU/w2j7K5xDPkyHm9ajdh3xygppHwIBEQIwKVbcT2wsVLX6L4cKbJD4b1SCm/+M7xFvHmqV0FqbHY0XhYYTYrcMexhqVSRT3yhJAhkA/NFcPBiZUVqwJco46b/0Hh9jahVVjSFTAhkA7TRfXHsQcCug1yvs3g+2VE8NfA6ZN2OFAhgdvkcWIQL6gyPINeiT+HcSmkfuXNzjbVUCGGGsJ0QyrGpsUUmKjrXKPASZBY1vbEP7zQIZALtis1SkY+1nrJ2V39mYvDdlIKLddlgQnw==";

            PrivateKeyTest(rsaParams, expected);
        }

        private void PrivateKeyTest(RSAParameters rsaParameters, string expectedB64)
        {
            byte[] actual = PKCS8DEREncoder.EncodePrivateKey(rsaParameters);
            byte[] expected = Convert.FromBase64String(expectedB64);
            CollectionAssert.AreEqual(expected, actual);

            string actualB64 = PKCS8DEREncoder.EncodePrivateKeyToBase64(rsaParameters);
            Assert.AreEqual(expectedB64, actualB64);
        }
    }
}
